{
  "name": "Howtrump",
  "tagline": "Wordcloud about #Trump 16/04/25—16/05/04 with data from Weibo and Twitter. ",
  "body": "# howTrump\r\nWordcloud about #Trump 16/04/25—16/05/04 with data from Weibo and Twitter. \r\n\r\nThis HTML site intends to visualize the use of #Trump from 16/04/25 to 16/05/04 on Weibo and Twitter. It takes data from  »data.js«, generates all words in the arrays allDays and allDaysCN. Then it assigns a font-size to each word according to the count of occurence in posts. This data is stored in the array days/daysCN. To allow more universal use some tings could still be simplyfied. For example there shouldn't be two functions in parallel for English and Chinese.\r\n\r\n```javascript\r\n\r\n// Genereate the English words\r\nvar init = \"\";\r\nfor (k = 0; k < allDays.length; k++) { \r\n\tinit += \"<div><span>\" + allDays[k][0] + \"</span></div>\";\r\n}\r\n\r\n// Genereate the Chinese words\r\nvar initCN = \"\";\r\nfor (i = 0; i < allDaysCN.length; i++) { \r\n\tinitCN += \"<div><span>\" + allDaysCN[i][0] + \"</span></div>\";\r\n}\r\n\r\n$(document).ready(function(){\r\n\r\n\tfunction newHTML(k) {\r\n\t\r\n\t  // Hide all words in the beginning of the loop. \r\n\t\t$('.container > div').addClass('inAct');\r\n\t\tfor (j = 0; j < days[k].length; j++) { \r\n\t\t  \r\n\t\t  // Iterate through the words and see which one matches to the dataset given for a particular day\r\n\t \t\t$('.container > div').each(function(){\r\n\t \t\t\tif($(this).children('span').html() === days[k][j][0]) {\r\n\t \t\t\t  \r\n\t \t\t\t  //If the current word occured on that day remove the class that hides it and increase the font-size according to the word count (Factor is .7, works fine to fit in 13\" screens)\r\n\t \t\t\t\t$(this).removeClass('inAct').children().css(\"font-size\",14+days[k][j][1]*.7).css(\"width\",days[k][j][1]*1.5 + \"px\");\r\n\t \t\t\t}\r\n\t \t\t});\r\n\t \t}\r\n\t \t\r\n\t \t// after the words have their size we use jquery.masonry by David Desandro to layout the output.\r\n\t \t$('.container').masonry({\r\n\t \t\titemSelector: 'div',\r\n\t  \t\tcolumnWidth: 1\r\n\t\t});\r\n\t\tnewDay = \"\";\r\n\t}\r\n\t\r\n\t// Same thing for Chinese, should be unified one day.\r\n\tfunction newHTMLCN(i) {\r\n\t\t$('.containerCN > div').addClass('inAct');\r\n\t\tfor (j = 0; j < daysCN[i].length; j++) { \r\n\t \t\t$('.containerCN > div').each(function(){\r\n\t \t\t\tif($(this).children('span').html() === daysCN[i][j][0]) {\r\n\t \t\t\t\t$(this).removeClass('inAct').children().css(\"font-size\",14+daysCN[i][j][1]*.7).css(\"width\",daysCN[i][j][1]*1.5 + \"px\");\r\n\t \t\t\t}\r\n\t \t\t});\r\n\t \t}\r\n\t \t$('.containerCN').masonry({\r\n\t \t\titemSelector: 'div',\r\n\t  \t\tcolumnWidth: 1\r\n\t\t});\r\n\t\tnewDayCN = \"\";\r\n\t}\r\n  \r\n  //Run the loop, reset counter if the itereation reaches the end.\r\n\tfunction myLoop () { \r\n\t\tsetTimeout(function () {    \r\n\t\t   newHTML(k);\r\n\t\t   \r\n\t\t   //Update the date top right from array \"dates\"\r\n\t\t   $('h1.day').html(\"Day: \" + dates[k]); \r\n\t\t   k++; \r\n\t\t   if (k < days.length) {      \r\n\t\t      myLoop();            \r\n\t\t   }\r\n\t\t   if (k == days.length) {      \r\n\t\t      k = 0;   \r\n\t\t      myLoop();          \r\n\t\t   }\r\n\t\t}, 800);\r\n\t}\r\n\r\n\t$('.container').html(init);\r\n\tvar k = 0;                     \r\n\t\r\n\tmyLoop();\r\n\tvar newDay = \"\"; \r\n\r\n\tfunction myLoopCN () { \r\n\t\tsetTimeout(function () {    \r\n\t\t   newHTMLCN(i);  \r\n\t\t   i++; \r\n\r\n\t\t   if (i < daysCN.length) {      \r\n\t\t      myLoopCN();            \r\n\t\t   }\r\n\t\t   if (i == daysCN.length) {      \r\n\t\t      i = 0;   \r\n\t\t      myLoopCN();          \r\n\t\t   }\r\n\t\t}, 800);\r\n\t}\r\n\r\n\t$('.containerCN').html(initCN);\r\n\tvar i = 0;                     \r\n\t\r\n\tmyLoopCN();\r\n\tvar newDayCN = \"\"; \r\n});\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}